/*
 * The MIT License
 *
 * Copyright 2015 Camilo Sampedro.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package gui;

import identity.Row;
import identity.Room;
import identity.ServerComputer;
import international.LanguagesController;
import java.util.ArrayList;

/**
 *
 * @author Camilo Sampedro
 * @version 0.1.0
 */
public class RoomInternalFrame extends javax.swing.JInternalFrame {

    private Room room;
    private ArrayList<RowPanel> rowPanels;
    
    /**
     * Creates new form JIFFSala
     */
    private RoomInternalFrame() {
        initComponents();
    }
    
    public RoomInternalFrame(Room sala){
        rowPanels = new ArrayList();
        initComponents();
        if(sala.isHorizontal()){
            mainPanel.setLayout(new java.awt.GridLayout(0, 1));
        } else {
            mainPanel.setLayout(new java.awt.GridLayout());
        }
        pack();
        this.room = sala;
        this.setTitle(sala.getName());
        for (Row fila : sala.getRows()){
            RowPanel panel = new RowPanel(fila);
            panel.setVisible(true);
            mainPanel.add(panel);
            rowPanels.add(panel);
        }
        this.paintAll(this.getGraphics());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkAll = new javax.swing.JCheckBox();
        mainPanel = new javax.swing.JPanel();

        checkAll.setText(LanguagesController.getWord("Select all"));
        checkAll.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        checkAll.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        checkAll.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkAllItemStateChanged(evt);
            }
        });

        mainPanel.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkAll, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkAll, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkAllItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkAllItemStateChanged
        changeAllChecked(checkAll.isSelected());
    }//GEN-LAST:event_checkAllItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkAll;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables

    ArrayList<ServerComputer> getSelectedComputers() {
        ArrayList<ServerComputer> selectedComputers = new ArrayList();
        for (RowPanel rowPanel: rowPanels){
            selectedComputers.addAll(rowPanel.getSelectedComputers());
        }
        return selectedComputers;
    }

    private void changeAllChecked(boolean selectState) {
        for(RowPanel rowPanel: rowPanels){
            rowPanel.changeAllChecked(selectState);
        }
    }
}
