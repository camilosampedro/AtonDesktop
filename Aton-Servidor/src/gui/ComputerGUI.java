/*
 * The MIT License
 *
 * Copyright 2015 Camilo Sampedro.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package gui;

import comunication.ServerComunicator;
import execution.Function;
import execution.Order;
import identity.ServerComputer;
import international.LanguagesController;
import java.io.IOException;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Camilo Sampedro
 * @version 0.7.5
 */
public class ComputerGUI extends javax.swing.JFrame {

    private ServerComputer computer;
    private javax.swing.ImageIcon icon;
    private UserTableModel userTableModel;

    /**
     * Creates new form InterfazEquipo
     */
    private ComputerGUI() {
        initComponents();
    }

    public ComputerGUI(ServerComputer computer) {
        this.computer = computer;
        userTableModel = new UserTableModel(computer.getUsers());
        setComputerIcon();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelEstado = new javax.swing.JPanel();
        jlIP = new javax.swing.JLabel();
        jlMac = new javax.swing.JLabel();
        jlPoder = new javax.swing.JLabel();
        jlEstado = new javax.swing.JLabel();
        panelButtons = new javax.swing.JPanel();
        btnTurnoff = new javax.swing.JButton();
        btnWakeup = new javax.swing.JButton();
        btnGeneralInformation = new javax.swing.JButton();
        btnNotify = new javax.swing.JButton();
        txtOrder = new javax.swing.JTextField();
        btnSendOrder = new javax.swing.JButton();
        btnSendBashFile = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(LanguagesController.getWord("Computer") + " " + computer.getComputerNumber());

        panelEstado.setBackground(new java.awt.Color(239, 239, 255));
        panelEstado.setLayout(new java.awt.GridLayout(0, 2, 10, 0));

        jlIP.setText("IP: " + computer.getIP());
        jlIP.setInheritsPopupMenu(false);
        panelEstado.add(jlIP);

        jlMac.setText("Mac: " + computer.getMac());
        panelEstado.add(jlMac);

        String encendido;
        if(computer.isPoweredOn()){
            encendido = "Encendido";
        } else {
            encendido = "Apagado";
        }
        jlPoder.setText("Poder: " + encendido);
        panelEstado.add(jlPoder);

        String estado;

        if(computer.isUsed()){
            estado = "En uso";
        } else {
            estado = "Disponible";
        }
        jlEstado.setText("Estado: " + estado);
        panelEstado.add(jlEstado);

        panelButtons.setLayout(new java.awt.GridLayout(0, 2, 5, 5));

        btnTurnoff.setText("Apagar");
        btnTurnoff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTurnoffActionPerformed(evt);
            }
        });
        panelButtons.add(btnTurnoff);

        btnWakeup.setText("Encender");
        btnWakeup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWakeupActionPerformed(evt);
            }
        });
        panelButtons.add(btnWakeup);

        btnGeneralInformation.setIcon(icon);
        btnGeneralInformation.setText(LanguagesController.getWord("Computer") + " " + computer.getComputerNumber());
        btnGeneralInformation.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGeneralInformation.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        btnNotify.setText("Notificar");
        btnNotify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNotifyActionPerformed(evt);
            }
        });

        btnSendOrder.setText("Enviar orden");
        btnSendOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendOrderActionPerformed(evt);
            }
        });

        btnSendBashFile.setText("Enviar archivo Bash");
        btnSendBashFile.setEnabled(false);

        userTable.setModel(userTableModel);
        jScrollPane1.setViewportView(userTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNotify, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGeneralInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSendOrder))
                    .addComponent(btnSendBashFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(panelButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelEstado, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(btnGeneralInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNotify)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSendOrder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSendBashFile, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNotifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNotifyActionPerformed
        if (!computer.isPoweredOn()){
            JOptionPane.showMessageDialog(this, LanguagesController.getWord("Computer off"), LanguagesController.getWord("Error"), JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (!computer.isUsed()) {
            JOptionPane.showMessageDialog(this, LanguagesController.getWord("Computer not used"), LanguagesController.getWord("Error"), JOptionPane.WARNING_MESSAGE);
            return;
        }
        String message = JOptionPane.showInputDialog(this, LanguagesController.getWord("NotifyRequest"), LanguagesController.getWord("Notify"), JOptionPane.QUESTION_MESSAGE);
        try {
            ServerComunicator.sendObject(new Order(Function.NOTIFICACION_ORDER(computer.getUsers().get(0), message)), computer.getIP());
        } catch (SocketException ex) {
            Logger.getLogger(ComputerGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ComputerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNotifyActionPerformed

    private void btnTurnoffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTurnoffActionPerformed
        if (!computer.isPoweredOn()){
            JOptionPane.showMessageDialog(this, LanguagesController.getWord("Computer off"), LanguagesController.getWord("Error"), JOptionPane.WARNING_MESSAGE);
            return;
        }
        try {
            // TODO add your handling code here:
            ServerComunicator.sendObject(new Order(Function.SHUTDOWN_ORDER), computer.getIP());
        } catch (SocketException ex) {
            Logger.getLogger(ComputerGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ComputerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnTurnoffActionPerformed

    private void btnSendOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendOrderActionPerformed
        if (!computer.isPoweredOn()){
            JOptionPane.showMessageDialog(this, LanguagesController.getWord("Computer off"), LanguagesController.getWord("Error"), JOptionPane.WARNING_MESSAGE);
            return;
        }
        String order = txtOrder.getText();
        if ("".equals(order) || order == null) {
            JOptionPane.showMessageDialog(this, LanguagesController.getWord("Empty order"), LanguagesController.getWord("Error"), JOptionPane.WARNING_MESSAGE);
            return;
        }
        try {
            ServerComunicator.sendObject(new Order(order), computer.getIP());
        } catch (SocketException ex) {
            Logger.getLogger(ComputerGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ComputerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSendOrderActionPerformed

    private void btnWakeupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWakeupActionPerformed
        try {
            execution.Execution.execute(new Order(Function.COMPUTER_WAKEUP_ORDER(192, computer.getMac())));
        } catch (IOException ex) {
            Logger.getLogger(ComputerGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(ComputerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnWakeupActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not portIsAvailable, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ComputerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ComputerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ComputerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ComputerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ComputerGUI().setVisible(true);
            }
        });
    }

    private void setComputerIcon() {
        if (computer.isPoweredOn()) {
            if (computer.isUsed()) {
                icon = new javax.swing.ImageIcon(getClass().getResource("/images/IconoPC-11.png"));
            } else {
                icon = new javax.swing.ImageIcon(getClass().getResource("/images/IconoPC-10.png"));
            }
        } else {
            icon = new javax.swing.ImageIcon(getClass().getResource("/images/IconoPC-00.png"));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGeneralInformation;
    private javax.swing.JButton btnNotify;
    private javax.swing.JButton btnSendBashFile;
    private javax.swing.JButton btnSendOrder;
    private javax.swing.JButton btnTurnoff;
    private javax.swing.JButton btnWakeup;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jlEstado;
    private javax.swing.JLabel jlIP;
    private javax.swing.JLabel jlMac;
    private javax.swing.JLabel jlPoder;
    private javax.swing.JPanel panelButtons;
    private javax.swing.JPanel panelEstado;
    private javax.swing.JTextField txtOrder;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
