/*
 * The MIT License
 *
 * Copyright 2015 Camilo Sampedro.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package gui;

import identity.Room;
import identity.Salon;
import identity.ServerComputer;
import java.util.ArrayList;

/**
 *
 * @author Camilo Sampedro
 */
public class SalonPanel extends javax.swing.JPanel {
    private Salon salon;
    private ArrayList<RoomInternalFrame> subwindows;

    /**
     * Creates new form PanelSalon
     */
    private SalonPanel() {
        initComponents();
    }
    
    public SalonPanel(Salon salon){
        subwindows = new ArrayList();
        this.salon = salon;
        initComponents();
        for(Room sala : salon.getRooms()){
            RoomInternalFrame subventana = new RoomInternalFrame(sala);
            subventana.setVisible(true);
            this.add(subventana);
            subwindows.add(subventana);
        }
        this.paintAll(this.getGraphics());
    }
    
    public ArrayList<ServerComputer> getSelectedComputers(){
        ArrayList<ServerComputer> selectedComputers = new ArrayList();
        for (RoomInternalFrame subwindow: subwindows){
            selectedComputers.addAll(subwindow.getSelectedComputers());
        }
        return selectedComputers;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridLayout(1, 0));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
