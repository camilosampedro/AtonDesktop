/*
 * The MIT License
 *
 * Copyright 2015 Camilo Sampedro.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package gui;

import identity.ServerComputer;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

/**
 *
 * @author Camilo Sampedro
 * @version 0.1.0
 */
public class ComputerPanel extends javax.swing.JPanel implements PropertyChangeListener {

    private ServerComputer computer;
    private javax.swing.ImageIcon icon;

    /**
     * Creates new form PanelEquipo
     */
    private ComputerPanel() {
        this.computer = null;
        initComponents();
        btnEquipo.setText("[E] VC");
    }

    public ComputerPanel(ServerComputer computer) {
        this.computer = computer;
        this.computer.addPropertyChangeListener(this);
        setComputerIcon();
        initComponents();
        btnEquipo.setText(Integer.toString(this.computer.getComputerNumber()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnEquipo = new javax.swing.JButton();
        cbSelection = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        btnEquipo.setBackground(new java.awt.Color(233, 233, 233));
        btnEquipo.setIcon(icon);
        btnEquipo.setText("##");
        btnEquipo.setBorderPainted(false);
        btnEquipo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEquipo.setIconTextGap(0);
        btnEquipo.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnEquipo.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnEquipo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEquipoActionPerformed(evt);
            }
        });

        cbSelection.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnEquipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cbSelection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnEquipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEquipoActionPerformed
        // TODO add your handling code here:
        ComputerGUI interfaz = new ComputerGUI(this.computer);
        interfaz.setVisible(true);
    }//GEN-LAST:event_btnEquipoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEquipo;
    private javax.swing.JCheckBox cbSelection;
    // End of variables declaration//GEN-END:variables

    private void setComputerIcon() {
        if (computer.isPoweredOn()) {
            if (computer.isUsed()) {
                icon = new javax.swing.ImageIcon(getClass().getResource("/images/IconoPC-11.png"));
            } else {
                icon = new javax.swing.ImageIcon(getClass().getResource("/images/IconoPC-10.png"));
            }
        } else {
            icon = new javax.swing.ImageIcon(getClass().getResource("/images/IconoPC-00.png"));
        }
    }
    
    public boolean isChecked(){
        return cbSelection.isSelected();
    }
    
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        String propertyName = evt.getPropertyName();
        if(ServerComputer.USE_STATE_PROPERTY.equals(propertyName) || ServerComputer.POWER_STATE_PROPERTY.equals(propertyName)){
            setComputerIcon();
            btnEquipo.setIcon(icon);
            System.out.println("Cambió el ícono");
            updateUserInterface();
        }
    }

    private void updateUserInterface() {
        this.updateUI();
    }

    ServerComputer getComputer() {
        return this.computer;
    }

    void setChecked(boolean selectState) {
        cbSelection.setSelected(selectState);
    }
}
